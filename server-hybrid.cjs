const express = require('express');\nconst cors = require('cors');\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\nconst { ClerkExpressWithAuth, requireAuth } = require('@clerk/clerk-react/server');\nconst dotenv = require('dotenv');\nconst path = require('path');\n\n// Price history generation utilities\nfunction generateFakePriceHistory(basePrice, pointsCount = 30, intervalSeconds = 15) {\n  const priceHistory = [];\n  const now = new Date();\n  \n  for (let i = pointsCount - 1; i >= 0; i--) {\n    const timestamp = new Date(now.getTime() - (i * intervalSeconds * 1000));\n    \n    // Generate realistic price variation\n    const randomVariation = (Math.random() - 0.5) * 2 * 0.03; // 3% max variation\n    \n    // Apply smoothing with previous point\n    let priceVariation = randomVariation;\n    if (priceHistory.length > 0) {\n      const prevPrice = priceHistory[priceHistory.length - 1].price;\n      const targetPrice = basePrice * (1 + randomVariation);\n      const smoothingFactor = 0.7;\n      const smoothedPrice = prevPrice * (1 - smoothingFactor) + targetPrice * smoothingFactor;\n      priceVariation = (smoothedPrice - basePrice) / basePrice;\n    }\n    \n    const price = Math.max(0.01, basePrice * (1 + priceVariation));\n    \n    priceHistory.push({\n      timestamp,\n      price: Math.round(price * 100) / 100\n    });\n  }\n  \n  return priceHistory.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n}\n\nfunction generateRealisticPriceChange(currentPrice, maxChangePercent = 2) {\n  const randomFactor = Math.random();\n  let changePercent;\n  \n  if (randomFactor < 0.7) {\n    changePercent = (Math.random() - 0.5) * 1.0; // Small changes\n  } else if (randomFactor < 0.9) {\n    changePercent = (Math.random() - 0.5) * 3.0; // Medium changes\n  } else {\n    changePercent = (Math.random() - 0.5) * maxChangePercent * 2; // Large changes\n  }\n  \n  const newPrice = currentPrice * (1 + changePercent / 100);\n  return Math.max(0.01, Math.round(newPrice * 100) / 100);\n}\n\n// Load environment variables\nif (process.env.NODE_ENV === 'production') {\n  console.log('🔧 Production mode: Using environment variables');\n} else {\n  console.log('🔧 Development mode: Loading from .env.local');\n  dotenv.config({ path: '.env.local' });\n}\n\nconst app = express();\nconst PORT = process.env.PORT || process.env.REMOTE_PORT || 3001;\n\n// Security Configuration\nconst JWT_SECRET = process.env.REMOTE_JWT_SECRET;\nconst API_KEY = process.env.REMOTE_API_KEY;\nconst CLERK_SECRET_KEY = process.env.CLERK_SECRET_KEY;\nconst ALLOWED_ORIGINS = (process.env.REMOTE_ALLOWED_ORIGINS || 'http://localhost:3000').split(',');\n\n// Debug: Log environment variable status\nconsole.log('🔍 Hybrid Server Environment Variables Check:');\nconsole.log('  NODE_ENV:', process.env.NODE_ENV);\nconsole.log('  JWT_SECRET:', JWT_SECRET ? '✅ SET' : '❌ MISSING');\nconsole.log('  CLERK_SECRET_KEY:', CLERK_SECRET_KEY ? '✅ SET' : '❌ MISSING');\nconsole.log('  API_KEY:', API_KEY ? '✅ SET' : '❌ MISSING');\n\n// Validate environment variables\nif (!JWT_SECRET && !CLERK_SECRET_KEY) {\n  console.error('❌ Either REMOTE_JWT_SECRET or CLERK_SECRET_KEY is required');\n  process.exit(1);\n}\n\nif (JWT_SECRET && JWT_SECRET.length < 32) {\n  console.error('❌ REMOTE_JWT_SECRET must be at least 32 characters');\n  process.exit(1);\n}\n\n// Initialize Clerk if available\nif (CLERK_SECRET_KEY) {\n  console.log('🛡️ Clerk authentication enabled');\n  app.use(ClerkExpressWithAuth({\n    secretKey: CLERK_SECRET_KEY,\n  }));\n}\n\n// Enable CORS\napp.use(cors({\n  origin: ALLOWED_ORIGINS,\n  credentials: true\n}));\n\napp.use(express.json());\n\n// User management for JWT authentication\nconst USERS = [\n  {\n    id: 1,\n    username: process.env.REMOTE_ADMIN_USERNAME || 'admin',\n    password: process.env.REMOTE_ADMIN_PASSWORD_HASH || '$2a$10$defaultHashChangeInProduction',\n    role: 'admin'\n  },\n  {\n    id: 2,\n    username: process.env.REMOTE_CONTROLLER_USERNAME || 'controller',\n    password: process.env.REMOTE_CONTROLLER_PASSWORD_HASH || '$2a$10$defaultHashChangeInProduction',\n    role: 'controller'\n  }\n];\n\n// Mock stock data\nconst defaultStockData = [\n  { symbol: 'BNOX', name: 'Bane&Ox Inc.', basePrice: 185.75 },\n  { symbol: 'GOOGL', name: 'Alphabet Inc.', basePrice: 176.30 },\n  { symbol: 'MSFT', name: 'Microsoft Corporation', basePrice: 415.20 },\n];\n\n// Initialize stocks with price history\nlet stocksData = defaultStockData.map(stock => {\n  const priceHistory = generateFakePriceHistory(stock.basePrice, 30, 15);\n  const mostRecentPrice = priceHistory[priceHistory.length - 1].price;\n  \n  return {\n    symbol: stock.symbol,\n    name: stock.name,\n    currentPrice: mostRecentPrice,\n    previousPrice: priceHistory.length > 1 ? priceHistory[priceHistory.length - 2].price : mostRecentPrice,\n    initialPrice: stock.basePrice,\n    percentageChange: ((mostRecentPrice - stock.basePrice) / stock.basePrice) * 100,\n    lastUpdated: new Date(),\n    priceHistory: priceHistory,\n  };\n});\n\n// System state\nlet systemState = {\n  isPaused: false,\n  updateIntervalMs: 1000,\n  selectedCurrency: 'USD',\n  lastUpdated: new Date(),\n  isEmergencyStopped: false\n};\n\n// Hybrid authentication middleware\nfunction hybridAuth(req, res, next) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ \n      error: 'Access token required', \n      authType: 'hybrid',\n      supportedMethods: ['jwt', 'clerk']\n    });\n  }\n\n  // Try Clerk authentication first (if available)\n  if (CLERK_SECRET_KEY && req.auth) {\n    try {\n      const { userId } = req.auth;\n      if (userId) {\n        // User is authenticated with Clerk\n        req.user = {\n          id: userId,\n          username: req.auth.user?.username || req.auth.user?.primaryEmailAddress?.emailAddress?.split('@')[0],\n          role: req.auth.user?.publicMetadata?.role || 'user',\n          authMethod: 'clerk'\n        };\n        \n        console.log('✅ Clerk authentication successful for user:', req.user.id);\n        return next();\n      }\n    } catch (clerkError) {\n      console.log('🔄 Clerk auth failed, trying JWT...', clerkError.message);\n      // Fall through to JWT authentication\n    }\n  }\n\n  // Try JWT authentication\n  if (JWT_SECRET) {\n    jwt.verify(token, JWT_SECRET, (err, decoded) => {\n      if (!err && decoded) {\n        // JWT authentication successful\n        req.user = {\n          ...decoded,\n          authMethod: 'jwt'\n        };\n        \n        console.log('✅ JWT authentication successful for user:', req.user.username);\n        return next();\n      }\n      \n      // Both authentication methods failed\n      console.log('❌ Both Clerk and JWT authentication failed');\n      return res.status(403).json({ \n        error: 'Authentication failed', \n        details: 'Invalid token for both JWT and Clerk authentication',\n        authType: 'hybrid'\n      });\n    });\n  } else {\n    // Only Clerk was available and it failed\n    return res.status(403).json({ \n      error: 'Authentication failed', \n      details: 'Clerk authentication failed and JWT not configured',\n      authType: 'clerk-only'\n    });\n  }\n}\n\n// Role-based authorization middleware\nfunction requireRole(roles) {\n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n    \n    const userRole = req.user.role;\n    const allowedRoles = Array.isArray(roles) ? roles : [roles];\n    \n    if (!allowedRoles.includes(userRole) && userRole !== 'admin') {\n      return res.status(403).json({ \n        error: 'Insufficient permissions', \n        required: allowedRoles,\n        current: userRole\n      });\n    }\n    \n    next();\n  };\n}\n\n// Authentication endpoints\n\n// JWT Login endpoint\napp.post('/api/remote/auth', async (req, res) => {\n  console.log('🔐 JWT Login attempt');\n  \n  try {\n    const { username, password } = req.body;\n    \n    if (!username || !password) {\n      return res.status(400).json({ \n        error: 'Username and password required',\n        authMethod: 'jwt'\n      });\n    }\n    \n    // Find user\n    const user = USERS.find(u => u.username === username);\n    if (!user) {\n      console.log('❌ User not found:', username);\n      return res.status(401).json({ \n        error: 'Invalid credentials',\n        authMethod: 'jwt'\n      });\n    }\n    \n    // Check password\n    const isValidPassword = await bcrypt.compare(password, user.password);\n    if (!isValidPassword) {\n      console.log('❌ Invalid password for user:', username);\n      return res.status(401).json({ \n        error: 'Invalid credentials',\n        authMethod: 'jwt'\n      });\n    }\n    \n    // Generate JWT token\n    const token = jwt.sign(\n      { \n        id: user.id, \n        username: user.username, \n        role: user.role \n      },\n      JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n    \n    console.log('✅ JWT Login successful for user:', username);\n    \n    res.json({\n      success: true,\n      token,\n      user: {\n        id: user.id,\n        username: user.username,\n        role: user.role\n      },\n      authMethod: 'jwt'\n    });\n    \n  } catch (error) {\n    console.error('JWT login error:', error);\n    res.status(500).json({ \n      error: 'Login failed',\n      details: error.message,\n      authMethod: 'jwt'\n    });\n  }\n});\n\n// Token verification endpoint\napp.get('/api/remote/auth', hybridAuth, (req, res) => {\n  res.json({\n    success: true,\n    user: {\n      id: req.user.id,\n      username: req.user.username || req.user.id,\n      role: req.user.role\n    },\n    authMethod: req.user.authMethod,\n    timestamp: new Date()\n  });\n});\n\n// Protected endpoints\n\n// Get stocks (read-only access)\napp.get('/api/remote/stocks', hybridAuth, (req, res) => {\n  console.log(`📊 Stocks requested by ${req.user.username} (${req.user.authMethod})`);\n  \n  res.json({\n    success: true,\n    stocks: stocksData,\n    authMethod: req.user.authMethod\n  });\n});\n\n// Get system controls\napp.get('/api/remote/controls', hybridAuth, (req, res) => {\n  console.log(`⚙️ Controls requested by ${req.user.username} (${req.user.authMethod})`);\n  \n  res.json({\n    success: true,\n    controls: systemState,\n    authMethod: req.user.authMethod\n  });\n});\n\n// Update stock price (requires controller or admin role)\napp.put('/api/remote/stocks/:symbol/price', hybridAuth, requireRole(['controller', 'admin']), (req, res) => {\n  const { symbol } = req.params;\n  const { price } = req.body;\n  \n  console.log(`💰 Price update for ${symbol} by ${req.user.username} (${req.user.authMethod}): ${price}`);\n  \n  if (!price || isNaN(price) || price <= 0) {\n    return res.status(400).json({ error: 'Valid price required' });\n  }\n  \n  const stock = stocksData.find(s => s.symbol === symbol);\n  if (!stock) {\n    return res.status(404).json({ error: 'Stock not found' });\n  }\n  \n  stock.previousPrice = stock.currentPrice;\n  stock.currentPrice = parseFloat(price);\n  stock.percentageChange = ((stock.currentPrice - stock.initialPrice) / stock.initialPrice) * 100;\n  stock.lastUpdated = new Date();\n  \n  // Add to price history\n  stock.priceHistory.push({\n    timestamp: new Date(),\n    price: stock.currentPrice\n  });\n  \n  // Keep only last 100 points\n  if (stock.priceHistory.length > 100) {\n    stock.priceHistory = stock.priceHistory.slice(-100);\n  }\n  \n  res.json({\n    success: true,\n    stock,\n    authMethod: req.user.authMethod\n  });\n});\n\n// Add new stock (requires admin role)\napp.post('/api/remote/stocks', hybridAuth, requireRole('admin'), (req, res) => {\n  const { symbol, name, price } = req.body;\n  \n  console.log(`➕ Adding stock ${symbol} by ${req.user.username} (${req.user.authMethod})`);\n  \n  if (!symbol || !name || !price) {\n    return res.status(400).json({ error: 'Symbol, name, and price required' });\n  }\n  \n  if (stocksData.find(s => s.symbol === symbol)) {\n    return res.status(409).json({ error: 'Stock already exists' });\n  }\n  \n  const newStock = {\n    symbol: symbol.toUpperCase(),\n    name,\n    currentPrice: parseFloat(price),\n    previousPrice: parseFloat(price),\n    initialPrice: parseFloat(price),\n    percentageChange: 0,\n    lastUpdated: new Date(),\n    priceHistory: [{\n      timestamp: new Date(),\n      price: parseFloat(price)\n    }]\n  };\n  \n  stocksData.push(newStock);\n  \n  res.json({\n    success: true,\n    stock: newStock,\n    authMethod: req.user.authMethod\n  });\n});\n\n// Delete stock (requires admin role)\napp.delete('/api/remote/stocks/:symbol', hybridAuth, requireRole('admin'), (req, res) => {\n  const { symbol } = req.params;\n  \n  console.log(`🗑️ Deleting stock ${symbol} by ${req.user.username} (${req.user.authMethod})`);\n  \n  const index = stocksData.findIndex(s => s.symbol === symbol);\n  if (index === -1) {\n    return res.status(404).json({ error: 'Stock not found' });\n  }\n  \n  const deletedStock = stocksData.splice(index, 1)[0];\n  \n  res.json({\n    success: true,\n    deletedStock,\n    authMethod: req.user.authMethod\n  });\n});\n\n// System control endpoints (requires admin role)\napp.put('/api/remote/controls/pause', hybridAuth, requireRole('admin'), (req, res) => {\n  const { paused } = req.body;\n  \n  console.log(`⏸️ Pause toggle by ${req.user.username} (${req.user.authMethod}): ${paused}`);\n  \n  systemState.isPaused = Boolean(paused);\n  systemState.lastUpdated = new Date();\n  \n  res.json({\n    success: true,\n    controls: systemState,\n    authMethod: req.user.authMethod\n  });\n});\n\napp.put('/api/remote/controls/emergency-stop', hybridAuth, requireRole('admin'), (req, res) => {\n  const { stopped } = req.body;\n  \n  console.log(`🚨 Emergency stop by ${req.user.username} (${req.user.authMethod}): ${stopped}`);\n  \n  systemState.isEmergencyStopped = Boolean(stopped);\n  systemState.isPaused = Boolean(stopped); // Emergency stop also pauses\n  systemState.lastUpdated = new Date();\n  \n  res.json({\n    success: true,\n    controls: systemState,\n    authMethod: req.user.authMethod\n  });\n});\n\n// Server info endpoint (public)\napp.get('/api/remote/info', (req, res) => {\n  res.json({\n    success: true,\n    server: 'Hybrid Stock Ticker API',\n    version: '1.0.0',\n    authentication: {\n      jwt: Boolean(JWT_SECRET),\n      clerk: Boolean(CLERK_SECRET_KEY),\n      hybrid: Boolean(JWT_SECRET && CLERK_SECRET_KEY)\n    },\n    timestamp: new Date()\n  });\n});\n\n// Health check\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'healthy',\n    timestamp: new Date(),\n    authentication: {\n      jwt: Boolean(JWT_SECRET),\n      clerk: Boolean(CLERK_SECRET_KEY)\n    }\n  });\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error('Server error:', err);\n  res.status(500).json({ \n    error: 'Internal server error',\n    details: process.env.NODE_ENV === 'development' ? err.message : undefined\n  });\n});\n\n// Start server\napp.listen(PORT, () => {\n  console.log(`🚀 Hybrid Stock Ticker API Server running on port ${PORT}`);\n  console.log(`🔧 Environment: ${process.env.NODE_ENV || 'development'}`);\n  console.log(`🔐 Authentication methods: ${JWT_SECRET ? 'JWT' : ''} ${CLERK_SECRET_KEY ? 'Clerk' : ''}`);\n  console.log(`🌍 Allowed origins: ${ALLOWED_ORIGINS.join(', ')}`);\n  \n  if (process.env.NODE_ENV !== 'production') {\n    console.log('\\n📋 Default test credentials (development only):');\n    console.log('  Admin: admin / (set REMOTE_ADMIN_PASSWORD_HASH)');\n    console.log('  Controller: controller / (set REMOTE_CONTROLLER_PASSWORD_HASH)');\n    console.log('\\n🔗 API Endpoints:');\n    console.log(`  POST http://localhost:${PORT}/api/remote/auth - JWT Login`);\n    console.log(`  GET  http://localhost:${PORT}/api/remote/stocks - Get stocks`);\n    console.log(`  GET  http://localhost:${PORT}/api/remote/controls - Get controls`);\n    console.log(`  GET  http://localhost:${PORT}/api/remote/info - Server info`);\n  }\n});\n\n// Price update simulation (for development)\nif (process.env.NODE_ENV !== 'production') {\n  setInterval(() => {\n    if (!systemState.isPaused && !systemState.isEmergencyStopped) {\n      stocksData = stocksData.map(stock => {\n        const newPrice = generateRealisticPriceChange(stock.currentPrice);\n        \n        const updatedStock = {\n          ...stock,\n          previousPrice: stock.currentPrice,\n          currentPrice: newPrice,\n          percentageChange: ((newPrice - stock.initialPrice) / stock.initialPrice) * 100,\n          lastUpdated: new Date(),\n        };\n        \n        // Add to price history\n        updatedStock.priceHistory.push({\n          timestamp: new Date(),\n          price: newPrice\n        });\n        \n        // Keep only last 100 points\n        if (updatedStock.priceHistory.length > 100) {\n          updatedStock.priceHistory = updatedStock.priceHistory.slice(-100);\n        }\n        \n        return updatedStock;\n      });\n    }\n  }, systemState.updateIntervalMs);\n}\n\nmodule.exports = app;
